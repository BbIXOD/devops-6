
name: CI/CD Pipeline

on:
  push:
    branches: [dev, main]
  workflow_dispatch:

env:
  REGISTRY: lab4reistry.azurecr.io
  IMAGE_PREFIX: someapp

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set environment variables
        id: env
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          BRANCH=$(echo "${GITHUB_REF##*/}")
          if [ "$BRANCH" == "main" ]; then
            TAG="$SHORT_SHA-prod"
            ENV="production"
          else
            TAG="$SHORT_SHA-dev"
            ENV="development"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build & Test com (Backend 1)
        working-directory: CommunicationControl/DevOpsProject
        run: |
          dotnet build
          dotnet test

      - name: Build & Test drone (Backend 2)
        working-directory: CommunicationControl/DevOpsProject.HiveMind.API
        run: |
          dotnet build
          dotnet test

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build map (Frontend)
        working-directory: MapClient
        run: |
          npm ci
          npm run build
          npm run test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Login to ACR
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker Images
        run: |
          docker build -t $REGISTRY/$IMAGE_PREFIX-com:${{ steps.env.outputs.tag }} -f Dockerfile.com .
          docker build -t $REGISTRY/$IMAGE_PREFIX-drone:${{ steps.env.outputs.tag }} -f Dockerfile.drone .
          docker build -t $REGISTRY/$IMAGE_PREFIX-map:${{ steps.env.outputs.tag }} -f Dockerfile.map .

      - name: Push Docker Images
        run: |
          docker push $REGISTRY/$IMAGE_PREFIX-com:${{ steps.env.outputs.tag }}
          docker push $REGISTRY/$IMAGE_PREFIX-drone:${{ steps.env.outputs.tag }}
          docker push $REGISTRY/$IMAGE_PREFIX-map:${{ steps.env.outputs.tag }}


      - name: Login to azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Kubeconfig
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: Deploy Kubernetes manifests
        run: |
          kubectl apply -f k8s/com-api-deployment.yaml -n ${{ steps.env.outputs.env }}
          kubectl apply -f k8s/com-api-service.yaml -n ${{ steps.env.outputs.env }}
          kubectl apply -f k8s/drone-api-deployment.yaml -n ${{ steps.env.outputs.env }}
          kubectl apply -f k8s/drone-api-service.yaml -n ${{ steps.env.outputs.env }}
          kubectl apply -f k8s/map-ui-deployment.yaml -n ${{ steps.env.outputs.env }}
          kubectl apply -f k8s/map-ui-service.yaml -n ${{ steps.env.outputs.env }}
          kubectl set env deployment/com Redis__ConnectionString=${{ secrets.REDIS_CONNECTION_STRING }} -n ${{ steps.env.outputs.env }}


      - name: Deploy to AKS
        run: |
          kubectl set image deployment/com com=$REGISTRY/$IMAGE_PREFIX-com:${{ steps.env.outputs.tag }} -n ${{ steps.env.outputs.env }}
          kubectl set image deployment/drone drone=$REGISTRY/$IMAGE_PREFIX-drone:${{ steps.env.outputs.tag }} -n ${{ steps.env.outputs.env }}
          kubectl set image deployment/map map=$REGISTRY/$IMAGE_PREFIX-map:${{ steps.env.outputs.tag }} -n ${{ steps.env.outputs.env }}
